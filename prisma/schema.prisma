datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleEnum {
  ADMIN
  PLAYER
}

enum GameEnum {
  BELA
  TRESETA
}

enum TrumpEnum {
  PIK
  HERC
  KARO
  TREF
}

enum BelaAnnouncementEnum {
  TWENTY
  FIFTY
  ONE_HUNDRED
  ONE_HUNDRED_FIFTY
  TWO_HUNDRED
}

enum TresetaAnnouncementEnum {
  THREE
  FOUR
}

enum TrumpCallerPositionEnum {
  FIRST
  SECOND
  THIRD
  FOURTH
}

model Player {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(100)
  password_hash   String
  email           String    @unique @db.VarChar(100)
  player_role     RoleEnum
  first_name      String?   @db.VarChar(100)
  last_name       String?   @db.VarChar(100)
  birth_year      Int?
  city            String?   @db.VarChar(100)
  created_at      DateTime  @default(now())
  last_updated_at DateTime? @updatedAt

  // Relationships
  founder1Teams                  Team[]                          @relation("PlayerFounder1")
  founder2Teams                  Team[]                          @relation("PlayerFounder2")
  creatorTeams                   Team[]                          @relation("PlayerCreator")
  teamPlayers                    TeamPlayer[]
  playerPairs1                   PlayerPair[]                    @relation("Player1Pair")
  playerPairs2                   PlayerPair[]                    @relation("Player2Pair")
  cardShufflerBelaResults        BelaResult[]                    @relation("PlayerCardShuffler")
  trumpCallerBelaResults         BelaResult[]                    @relation("PlayerTrumpCaller")
  ongoingCardShufflerBelaResults OngoingBelaResult[]             @relation("OngoingCardShuffler")
  ongoingTrumpCallerBelaResults  OngoingBelaResult[]             @relation("OngoingTrumpCaller")
  belaPlayerAnnouncements        BelaPlayerAnnouncement[]
  tresetaPlayerAnnouncements     TresetaPlayerAnnouncement[]
  ongoingBelaPlayerAnnouncements OngoingBelaPlayerAnnouncement[]
  sessions                       Session[]
}

model Session {
  id        String    @id @default(uuid()) @db.Uuid
  expiresAt DateTime?
  userId    Int?
  player    Player?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Tournament {
  tournament_id   Int      @id @default(autoincrement())
  tournament_name String   @db.VarChar(100)
  game_type       GameEnum

  // Relationships
  tournamentTeams  TournamentTeam[]
  tournamentRounds TournamentRound[]
  teamScore        TeamScore[]
}

model League {
  league_id   Int      @id @default(autoincrement())
  league_name String   @db.VarChar(100)
  game_type   GameEnum

  // Relationships
  leagueTeams  LeagueTeam[]
  leagueRounds LeagueRound[]
  teamScore    TeamScore[]
}

model Team {
  team_id         Int       @id @default(autoincrement())
  team_name       String    @unique @db.VarChar(100)
  founder_id1     Int?
  founder_id2     Int?
  creator_id      Int?
  created_at      DateTime  @default(now())
  last_updated_at DateTime? @updatedAt

  // Relationships
  founder1        Player?          @relation("PlayerFounder1", fields: [founder_id1], references: [id], onDelete: SetNull)
  founder2        Player?          @relation("PlayerFounder2", fields: [founder_id2], references: [id], onDelete: SetNull)
  creator         Player?          @relation("PlayerCreator", fields: [creator_id], references: [id], onDelete: SetNull)
  teamPlayers     TeamPlayer[]
  tournamentTeams TournamentTeam[]
  leagueTeams     LeagueTeam[]
  roundsAsTeam1   Round[]          @relation("RoundTeam1")
  roundsAsTeam2   Round[]          @relation("RoundTeam2")
  teamScore       TeamScore[]
}

model TeamScore {
  id            Int @id @default(autoincrement())
  team_id       Int
  league_id     Int?
  tournament_id Int?
  score         Int @default(0)


  // Relationships
  team        Team        @relation(fields: [team_id], references: [team_id], onDelete: Cascade)
  league      League?     @relation(fields: [league_id], references: [league_id], onDelete: Cascade)
  tournament  Tournament? @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)

  // This model is additionaly modified in the migration script to add a constraint of 
  // either league_id or tournament_id not being null!
  // CHECK if this constraint is removed after every modification of TeamScore model!
}

model TeamPlayer {
  team_id   Int
  player_id Int

  team   Team   @relation(fields: [team_id], references: [team_id], onDelete: Cascade)
  player Player @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@id([team_id, player_id])
}

model TournamentTeam {
  tournament_id Int
  team_id       Int

  tournament Tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)
  team       Team       @relation(fields: [team_id], references: [team_id], onDelete: Cascade)

  @@id([tournament_id, team_id])
}

model LeagueTeam {
  league_id Int
  team_id   Int

  league League @relation(fields: [league_id], references: [league_id], onDelete: Cascade)
  team   Team   @relation(fields: [team_id], references: [team_id], onDelete: Cascade)

  @@id([league_id, team_id])
}

model Round {
  id           Int       @id @default(autoincrement())
  round_number Int?
  round_date   DateTime?
  team1_id     Int?
  team2_id     Int?

  team1            Team?             @relation("RoundTeam1", fields: [team1_id], references: [team_id], onDelete: SetNull)
  team2            Team?             @relation("RoundTeam2", fields: [team2_id], references: [team_id], onDelete: SetNull)
  matches          Match[]
  ongoingMatches   OngoingMatch[]
  tournamentRounds TournamentRound[]
  leagueRounds     LeagueRound[]
}

model TournamentRound {
  tournament_id Int
  round_id      Int

  tournament Tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)
  round      Round      @relation(fields: [round_id], references: [id], onDelete: Cascade)

  @@id([tournament_id, round_id])
}

model LeagueRound {
  league_id Int
  round_id  Int

  league League @relation(fields: [league_id], references: [league_id], onDelete: Cascade)
  round  Round  @relation(fields: [round_id], references: [id], onDelete: Cascade)

  @@id([league_id, round_id])
}

model PlayerPair {
  id         Int @id @default(autoincrement())
  player_id1 Int
  player_id2 Int

  player1          Player         @relation("Player1Pair", fields: [player_id1], references: [id], onDelete: Cascade)
  player2          Player         @relation("Player2Pair", fields: [player_id2], references: [id], onDelete: Cascade)
  matchesAsPair1   Match[]        @relation("MatchPair1")
  matchesAsPair2   Match[]        @relation("MatchPair2")
  ongoingMatchesp1 OngoingMatch[] @relation("MatchPair1")
  ongoingMatchesp2 OngoingMatch[] @relation("MatchPair2")

  @@unique([player_id1, player_id2])
}

model Match {
  id                 Int       @id @default(autoincrement())
  round_id           Int?
  player_pair1_score Int       @default(0)
  player_pair2_score Int       @default(0)
  player_pair_id1    Int?
  player_pair_id2    Int?
  score_threshold    Int?
  start_time         DateTime?
  end_time           DateTime?
  match_date         DateTime? @default(now())

  round          Round?          @relation(fields: [round_id], references: [id], onDelete: SetNull)
  playerPair1    PlayerPair?     @relation("MatchPair1", fields: [player_pair_id1], references: [id], onDelete: Cascade)
  playerPair2    PlayerPair?     @relation("MatchPair2", fields: [player_pair_id2], references: [id], onDelete: Cascade)
  belaResults    BelaResult[]
  tresetaResults TresetaResult[]
}

model OngoingMatch {
  id                     Int       @id @default(autoincrement())
  round_id               Int?
  player_pair1_score     Int       @default(0)
  player_pair2_score     Int       @default(0)
  player_pair_id1        Int?
  player_pair_id2        Int?
  score_threshold        Int?
  start_time             DateTime?
  end_time               DateTime?
  match_date             DateTime? @default(now())
  seating_order_ids      Int[]
  current_shuffler_index Int       @default(0)

  round       Round?              @relation(fields: [round_id], references: [id], onDelete: SetNull)
  playerPair1 PlayerPair?         @relation("MatchPair1", fields: [player_pair_id1], references: [id], onDelete: Cascade)
  playerPair2 PlayerPair?         @relation("MatchPair2", fields: [player_pair_id2], references: [id], onDelete: Cascade)
  belaResults OngoingBelaResult[]
}

model BelaResult {
  result_id                        Int                     @id @default(autoincrement())
  match_id                         Int
  player_pair1_game_points         Int                     @default(0)
  player_pair2_game_points         Int                     @default(0)
  player_pair1_announcement_points Int                     @default(0)
  player_pair2_announcement_points Int                     @default(0)
  player_pair1_total_points        Int                     @default(0)
  player_pair2_total_points        Int                     @default(0)
  card_shuffler_id                 Int?
  trump_caller_id                  Int?
  trump_caller_position            TrumpCallerPositionEnum
  trump_type                       TrumpEnum?
  pass                             Boolean                 @default(false)
  complete_victory                 Boolean                 @default(false)

  match                   Match                    @relation(fields: [match_id], references: [id], onDelete: Cascade)
  cardShuffler            Player?                  @relation("PlayerCardShuffler", fields: [card_shuffler_id], references: [id], onDelete: SetNull)
  trumpCaller             Player?                  @relation("PlayerTrumpCaller", fields: [trump_caller_id], references: [id], onDelete: SetNull)
  belaPlayerAnnouncements BelaPlayerAnnouncement[]
}

model OngoingBelaResult {
  result_id                        Int                     @id @default(autoincrement())
  match_id                         Int
  player_pair1_game_points         Int                     @default(0)
  player_pair2_game_points         Int                     @default(0)
  player_pair1_announcement_points Int                     @default(0)
  player_pair2_announcement_points Int                     @default(0)
  player_pair1_total_points        Int                     @default(0)
  player_pair2_total_points        Int                     @default(0)
  card_shuffler_id                 Int?
  trump_caller_id                  Int?
  trump_caller_position            TrumpCallerPositionEnum
  trump_type                       TrumpEnum?
  pass                             Boolean                 @default(false)
  complete_victory                 Boolean                 @default(false)

  match                   OngoingMatch                    @relation(fields: [match_id], references: [id], onDelete: Cascade)
  ongoingCardShuffler     Player?                         @relation("OngoingCardShuffler", fields: [card_shuffler_id], references: [id], onDelete: SetNull)
  ongoingTrumpCaller      Player?                         @relation("OngoingTrumpCaller", fields: [trump_caller_id], references: [id], onDelete: SetNull)
  belaPlayerAnnouncements OngoingBelaPlayerAnnouncement[]
}

model TresetaResult {
  result_id                        Int @id @default(autoincrement())
  match_id                         Int
  player_pair1_game_points         Int @default(0)
  player_pair2_game_points         Int @default(0)
  player_pair1_announcement_points Int @default(0)
  player_pair2_announcement_points Int @default(0)

  match                      Match                       @relation(fields: [match_id], references: [id], onDelete: Cascade)
  tresetaPlayerAnnouncements TresetaPlayerAnnouncement[]
}

model BelaPlayerAnnouncement {
  announcement_id   Int                  @id @default(autoincrement())
  result_id         Int
  player_id         Int
  announcement_type BelaAnnouncementEnum

  result BelaResult @relation(fields: [result_id], references: [result_id], onDelete: Cascade)
  player Player     @relation(fields: [player_id], references: [id], onDelete: Cascade)
}

model OngoingBelaPlayerAnnouncement {
  announcement_id   Int                  @id @default(autoincrement())
  result_id         Int
  player_id         Int
  announcement_type BelaAnnouncementEnum

  result OngoingBelaResult @relation(fields: [result_id], references: [result_id], onDelete: Cascade)
  player Player            @relation(fields: [player_id], references: [id], onDelete: Cascade)
}

model TresetaPlayerAnnouncement {
  announcement_id   Int                     @id @default(autoincrement())
  result_id         Int
  player_id         Int
  announcement_type TresetaAnnouncementEnum

  result TresetaResult @relation(fields: [result_id], references: [result_id], onDelete: Cascade)
  player Player        @relation(fields: [player_id], references: [id], onDelete: Cascade)
}
